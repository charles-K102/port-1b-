/* autogenerated by Processing revision 1286 on 2025-10-14 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Spacegame extends PApplet {

// charles killpack | 2025 sep 13 | Spacegame

//Soundfile .wav;
SpaceShip s1;
//Rock r1;
ArrayList<Rock> rocks = new ArrayList<Rock>();
ArrayList<Laser> lasers = new ArrayList<Laser>();
ArrayList<Star> stars = new ArrayList<Star>();
ArrayList<PowerUp> powups = new ArrayList<PowerUp>();
Timer rockTimer, puTimer;
boolean play;

int score, rocksPassed, level,rtime;

 public void setup () {
  /* size commented out by preprocessor */;
  s1 = new SpaceShip();
  puTimer = new Timer (5000);
  puTimer.start();
  rockTimer = new Timer(5000);
  rockTimer.start();
  score = 0;
  rocksPassed = 0;
  play = false;
  level = 1;
  rtime = 5000;
}

 public void draw () {
  if (play == false) {
    startScreen();
  }else{
  
  background(22);

  //adding stars
  stars.add(new Star());

  for (int i = 0; i < stars.size(); i++) {
    Star star = stars.get(i);
    star.display();
    star.move();
    if (star.reachedBottom()==true) {
      stars.remove(star);
    }
  }

  //distributes rocks on timer
  if (rockTimer.isFinished()) {
    rocks.add(new Rock());
    rockTimer.start();
  }

  // dis tributes and star pu timer
  if (puTimer.isFinished()) {
    powups.add(new PowerUp());
    puTimer.start();
  }

  for (int i = 0; i < powups.size(); i++) {
    PowerUp powerup = powups.get(i);
    //collision detection between rock and ship
    powerup.display();
    powerup.move();
    if (powerup.intersect(s1)) {
      powups.remove(powerup);
      //basedf on type benifit gain
      if (powerup.type == 'H') {
        s1.health+=1000;
      } else if (powerup.type == 'T') {
        s1.turretCount+=1;}
        if (s1.turretCount>5) {
          s1.turretCount = 5;
        } else if (powerup.type == 'A') {
        s1.laserCount+=100;
      }
      if (powerup.reachedBottom()==true) {
        powups.remove(powerup);
        i--;
        //PowupsPassed++;
      }
    }
  }

    //display of rocks
    for (int i = 0; i < rocks.size(); i++) {
      Rock rock = rocks.get(i);
      //collision detection between rock and ship
      rock.display();
      rock.move();
      if (s1.intersect(rock)) {
        rocks.remove(rock);
        score = score + rock.diam;
        s1.health = s1.health - rock.diam;
      }

      if (rock.reachedBottom()==true) {
        rocks.remove(rock);
        i--;
        rocksPassed++;
      }
    }

    //display of lasers
    for (int s = 0; s < lasers.size(); s++) {
      Laser laser = lasers.get(s);
      for (int j = 0; j < rocks.size(); j++) {
        Rock r = rocks.get(j);
        if (laser.intersect(r));
        {

          //reduce hp on rock;
          r.diam = r. diam -10;
          if (r.diam< 10) {
            rocks.remove(r);
          }
          lasers.remove(laser);

          score = score + 10;
        }
      }
      laser.display();
      laser.move();
      if (laser.reachedTop()) {
        lasers.remove(laser);
      }
      println(lasers.size());
    }


    println(rocks.size());
    s1.display ();
    s1.move(mouseX, mouseY);

    infoPanel();
    if (s1.health<1) {
      gameOver();
    }
 if (rocksPassed>10) {
  level++; 
  rtime-=10;
  //if (level<20);{
  //level--;}
 }
 }
  
}
   public void mousePressed() {
   // if (s1.fire()) {
     // lasers.add(new Laser(s1.x, s1.y));
    //  s1.laserCount--;
   // } 
    if (s1.turretCount==1) {
      lasers.add(new Laser(s1.x, s1.y));
      s1.laserCount--;
    }else
    if (s1.turretCount==2) {
      lasers.add(new Laser(s1.x, s1.y+10));
      lasers.add(new Laser(s1.x, s1.y-10));
      s1.laserCount--;
    } else if (s1.turretCount<3);
    lasers.add(new Laser(s1.x, s1.y+10));
      lasers.add(new Laser(s1.x, s1.y-10));
      lasers.add(new Laser(s1.x, s1.y));
      s1.laserCount--;
 
}
  
   public void infoPanel() {
    rectMode(CENTER);
    rect(width/2, 25, width, 50);
    fill(220);
    textSize(30);
    text("Score: "+ score, 20, 40);
    text("health: " + s1.health, 350, height - 20);
    text ("ammo: " + s1.laserCount, 600, 40);
    text("Rocks Passed: " + rocksPassed, 780, 40);
     text("turret: " + s1.turretCount, 400, 40);
   text("level: " + level, width/2,300);  
   
    fill (255);
    
    rect(50, height-100, 100, 10);
    fill(255, 0, 0);
    rect(50, height-100, s1.health, 10);
  }

   public void gameOver () {
    background(0);
    fill (255);
    textAlign(CENTER);
    text("ur dead :)", 500, height/2);
    noLoop();
  }
   public void startScreen () {
    //imageMode(CENTER);
    //Image;
    background(0);
    fill(255);
    text("click to start",width/2,height/2);
    if(mousePressed){
   play = true;
 }
  }
  
class Laser {
  // Member varibles
  //health,speed,ammo,lives; | boolean sheild | color c;
  int x, y, w, h, speed;

  // Constructor
  Laser(int x, int y) {
    this.x = x;
    this.y = y;
    w = 5;
    h = 10;
    speed = 8;
  }

  // Member methods
   public void display() {
    fill (255, 0, 0);
    rectMode(CENTER);
    rect(x, y, w, h);
  }

   public void move() {
    y = y - speed;
  }

   public void fire() {
  }

   public boolean reachedTop() {
    if (y<-20) {
      return true;
    } else {
      return false;
    }
  }
   public boolean intersect (Rock r) {
    float d = dist(x, y, r.x, r.y);
    if (d<5) {
      return true;
    } else {
      return false;
   }
  }
}
class PowerUp {
  // Member varibles
  //health,speed,ammo,lives; | boolean sheild | color c;
  int x, y, diam, speed;
  char type;
  int c1;
  //PImage r1, r2, r3;

  // Constructor
  PowerUp() {
    
    x = PApplet.parseInt(random(width));
    y = - 100;
    diam = 100;       
    // (if you want random diam) int(random(100, 200));
    speed = 5;           
    // (if you want random speed) int(random(1, 10));
    
    if (random(10)>7) {
  
     type= 'H';
     c1 = color(255,0,255);
    } else if (random(10)>5) {
   
    type = 'T';
    c1 = color (234,33,24);
    } else if (random(10)>0) {
    type = 'A';
    c1= color(22,34,255);
    }
  }

  // Member methods
   public void display() {
  fill(c1);
  ellipse(x,y,diam,diam);
  fill(255);
  
  textSize(30);
  textAlign(CENTER);
    text(type,x,y);
    
    // imageMode(CENTER);
    //if(diam<1) {
    //  diam = 10;
   // }
   // r1.resize(diam,diam);
   // image(r1, x, y);
  }

   public void move() {
    y = y + speed  ;
  }

   public boolean reachedBottom() {
    if (y>height+diam) {
      return true;
    } else {
      return false;
    }
  }
   public boolean intersect (SpaceShip S) {
    float d = dist(x, y, S.x, S.y);
    if (d<50) {
      return true;
    } else {
      return false;
   }
  }
  
}
class Rock {
  // Member varibles
  //health,speed,ammo,lives; | boolean sheild | color c;
  int x, y, diam, speed;
  PImage r1, r2, r3;

  // Constructor
  Rock() {
    x = PApplet.parseInt(random(width/2));
    y = - 100;
    diam = PApplet.parseInt(random(100, 300));
    speed = PApplet.parseInt(random(1, 10));
    if (random(10)>7) {
      r1 = loadImage("rock01.png");
    } else if (random(10)>5) {
      r1 = loadImage("rock02.png");
    } else if (random(10)>0) {
      r1 = loadImage("rock03.png");
    }
  }

  // Member methods
   public void display() {
    imageMode(CENTER);
    if(diam<1) {
      diam = 10;
    }
    r1.resize(diam,diam);
    image(r1, x, y);
  }

   public void move() {
    y = y + speed + level;
  }

   public boolean reachedBottom() {
    if (y>height+diam) {
      return true;
    } else {
      return false;
    }
  }
}
// charles killpack | 2025 sep 13 | Spacegame

class SpaceShip {
  // Member varibles
  //health,speed,ammo,lives; | boolean sheild | color c;
  int x, y, w, laserCount, turretCount, health, mouseX, mouseY;
  PImage bug;
  // Constructor
  SpaceShip() {
    x = width/2;
    y = height/2;
    w = 100;
    laserCount = 1000;
    turretCount = 1;
    health = 100;
    bug = loadImage ("bugship.png");
  }

  // Member methods
   public void display() {
    imageMode(CENTER);
    image(bug, x, y);
  }

   public void move(int x, int y) {
    this.x = x;
    this.y = y;
  }

   public boolean fire() {
    if (laserCount>0) {
    return true;
    } else {
      return false;
    }
  }

   public boolean intersect(Rock r) {
    float d = dist (x, y, r.x, r.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class Star {
  //member variables
  int x, y, w, speed;

  Star() {
    x = PApplet.parseInt(random(width));
    y = -10;
    w = PApplet.parseInt(random(1, 4));
    speed= PApplet.parseInt(random(2, 8));
  }

   public void display() {
    fill(random(255, 225));
    ellipse(x, y, w, w);
  }
   public void move () {
    y = y + speed;
  }

   public boolean reachedBottom() {
    if (y>height+10) {
      return true;
    } else {
      return false;
    }
  }
}
class Timer {

  int savedTime; // When Timer started
  int totalTime; // How long Timer should last

  Timer(int tempTotalTime) {
    totalTime = tempTotalTime;
  }

  // Starting the timer
   public void start() {
    // When the timer starts it stores the current time in milliseconds.
    savedTime = millis();
  }

  // The function isFinished() returns true if 5,000 ms have passed.
  // The work of the timer is farmed out to this method.
   public boolean isFinished() {
    // Check how much time has passed
    int passedTime = millis()- savedTime;
    if (passedTime > totalTime) {
      return true;
    } else {
      return false;
    }
  }
}


  public void settings() { size(1000, 1000); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Spacegame" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
